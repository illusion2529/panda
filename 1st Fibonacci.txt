// Recursive approach

public class Fibonacci {
    public static void main(String[] args) {
        int n = 10; // Change this to the desired Fibonacci number you want to calculate
        System.out.println("Fibonacci series up to position " + n + ":");
        for (int i = 0; i <= n; i++) {
            int result = calculateFibonacci(i);
            System.out.print(result + " ");
        }
        System.out.println(); // Print a new line for better formatting
        System.out.println("Fibonacci number at position " + n + " is: " + calculateFibonacci(n));
        System.out.println("Step count: " + stepCount);
    }

    static int stepCount = 0; // Variable to keep track of the step count

    public static int calculateFibonacci(int n) {
        stepCount++; // Increment the step count for each function call

        if (n <= 1) {
            return n;
        }

        return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);
    }
}

//Iterative approach

public class Fibonacci {
    public static void main(String[] args) {
        int n = 10; // Change this to the desired Fibonacci number you want to calculate
        System.out.println("Fibonacci series up to position " + n + ":");
        for (int i = 0; i <= n; i++) {
            int result = calculateFibonacci(i);
            System.out.print(result + " ");
        }
        System.out.println(); // Print a new line for better formatting

        int result = calculateFibonacci(n);
        System.out.println("Fibonacci number at position " + n + " is: " + result);
    }

    public static int calculateFibonacci(int n) {
        if (n <= 1) {
            return n;
        }

        int a = 0;
        int b = 1;
        int c = 0;

        for (int i = 2; i <= n; i++) {
            a = b + c;

            // Update variables for the next iteration
            c = b;
            b = a;
        }

        return a;
    }
}

